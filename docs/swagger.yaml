basePath: /
definitions:
  dto.AuthResponse:
    properties:
      token:
        type: string
    type: object
  dto.DeleteUserResponse:
    properties:
      message:
        example: user deleted
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.SignupRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      points:
        type: integer
      role:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для пользователей, мест, отзывов и токенов
  title: Reviewlink API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Логин по email и паролю, возвращает JWT-токен
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: user not found / invalid credentials
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: login failed
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Авторизация пользователя
      tags:
      - auth
  /signup:
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя и возвращает токен
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: email already in use
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: failed to signup
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - auth
  /users:
    delete:
      description: Удаляет пользователя по user_id из токена
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeleteUserResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: failed to delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление пользователя
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Возвращает данные пользователя по user_id из токена
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: failed to get user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение пользователя
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Обновляет имя, email или пароль пользователя по user_id из токена
      parameters:
      - description: Данные для обновления пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: invalid input / at least one field must be provided
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: email already in use
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: failed to update user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление пользователя
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
