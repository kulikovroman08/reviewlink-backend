// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../tests/integration/mocks/repository_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/kulikovroman08/reviewlink-backend/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddPoints mocks base method.
func (m *MockUserRepository) AddPoints(ctx context.Context, userID string, points int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoints", ctx, userID, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoints indicates an expected call of AddPoints.
func (mr *MockUserRepositoryMockRecorder) AddPoints(ctx, userID, points any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoints", reflect.TypeOf((*MockUserRepository)(nil).AddPoints), ctx, userID, points)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, users *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, users)
}

// FindAnyByEmail mocks base method.
func (m *MockUserRepository) FindAnyByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAnyByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAnyByEmail indicates an expected call of FindAnyByEmail.
func (mr *MockUserRepositoryMockRecorder) FindAnyByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAnyByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindAnyByEmail), ctx, email)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), ctx, email)
}

// FindByID mocks base method.
func (m *MockUserRepository) FindByID(ctx context.Context, userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRepositoryMockRecorder) FindByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepository)(nil).FindByID), ctx, userID)
}

// SoftDeleteUser mocks base method.
func (m *MockUserRepository) SoftDeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteUser indicates an expected call of SoftDeleteUser.
func (mr *MockUserRepositoryMockRecorder) SoftDeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteUser", reflect.TypeOf((*MockUserRepository)(nil).SoftDeleteUser), ctx, userID)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// MockPlaceRepository is a mock of PlaceRepository interface.
type MockPlaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceRepositoryMockRecorder
	isgomock struct{}
}

// MockPlaceRepositoryMockRecorder is the mock recorder for MockPlaceRepository.
type MockPlaceRepositoryMockRecorder struct {
	mock *MockPlaceRepository
}

// NewMockPlaceRepository creates a new mock instance.
func NewMockPlaceRepository(ctrl *gomock.Controller) *MockPlaceRepository {
	mock := &MockPlaceRepository{ctrl: ctrl}
	mock.recorder = &MockPlaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceRepository) EXPECT() *MockPlaceRepositoryMockRecorder {
	return m.recorder
}

// CreatePlace mocks base method.
func (m *MockPlaceRepository) CreatePlace(ctx context.Context, place *model.Place) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlace", ctx, place)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlace indicates an expected call of CreatePlace.
func (mr *MockPlaceRepositoryMockRecorder) CreatePlace(ctx, place any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlace", reflect.TypeOf((*MockPlaceRepository)(nil).CreatePlace), ctx, place)
}

// MockReviewRepository is a mock of ReviewRepository interface.
type MockReviewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReviewRepositoryMockRecorder
	isgomock struct{}
}

// MockReviewRepositoryMockRecorder is the mock recorder for MockReviewRepository.
type MockReviewRepositoryMockRecorder struct {
	mock *MockReviewRepository
}

// NewMockReviewRepository creates a new mock instance.
func NewMockReviewRepository(ctrl *gomock.Controller) *MockReviewRepository {
	mock := &MockReviewRepository{ctrl: ctrl}
	mock.recorder = &MockReviewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewRepository) EXPECT() *MockReviewRepositoryMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockReviewRepository) CreateReview(ctx context.Context, review model.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", ctx, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockReviewRepositoryMockRecorder) CreateReview(ctx, review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockReviewRepository)(nil).CreateReview), ctx, review)
}

// GetReviewToken mocks base method.
func (m *MockReviewRepository) GetReviewToken(ctx context.Context, token string) (*model.ReviewToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewToken", ctx, token)
	ret0, _ := ret[0].(*model.ReviewToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewToken indicates an expected call of GetReviewToken.
func (mr *MockReviewRepositoryMockRecorder) GetReviewToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewToken", reflect.TypeOf((*MockReviewRepository)(nil).GetReviewToken), ctx, token)
}

// HasReviewToday mocks base method.
func (m *MockReviewRepository) HasReviewToday(ctx context.Context, userID, placeID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasReviewToday", ctx, userID, placeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasReviewToday indicates an expected call of HasReviewToday.
func (mr *MockReviewRepositoryMockRecorder) HasReviewToday(ctx, userID, placeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasReviewToday", reflect.TypeOf((*MockReviewRepository)(nil).HasReviewToday), ctx, userID, placeID)
}

// MarkReviewTokenUsed mocks base method.
func (m *MockReviewRepository) MarkReviewTokenUsed(ctx context.Context, tokenID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkReviewTokenUsed", ctx, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkReviewTokenUsed indicates an expected call of MarkReviewTokenUsed.
func (mr *MockReviewRepositoryMockRecorder) MarkReviewTokenUsed(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkReviewTokenUsed", reflect.TypeOf((*MockReviewRepository)(nil).MarkReviewTokenUsed), ctx, tokenID)
}

// MockTokenRepository is a mock of TokenRepository interface.
type MockTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockTokenRepositoryMockRecorder is the mock recorder for MockTokenRepository.
type MockTokenRepositoryMockRecorder struct {
	mock *MockTokenRepository
}

// NewMockTokenRepository creates a new mock instance.
func NewMockTokenRepository(ctrl *gomock.Controller) *MockTokenRepository {
	mock := &MockTokenRepository{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepository) EXPECT() *MockTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateTokens mocks base method.
func (m *MockTokenRepository) CreateTokens(ctx context.Context, tokens []model.ReviewToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokens", ctx, tokens)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTokens indicates an expected call of CreateTokens.
func (mr *MockTokenRepositoryMockRecorder) CreateTokens(ctx, tokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokens", reflect.TypeOf((*MockTokenRepository)(nil).CreateTokens), ctx, tokens)
}
