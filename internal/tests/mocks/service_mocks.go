// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../tests/integration/mocks/service_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/kulikovroman08/reviewlink-backend/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, userID)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(ctx context.Context, userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), ctx, userID)
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, email, password)
}

// Signup mocks base method.
func (m *MockUserService) Signup(ctx context.Context, name, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, name, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockUserServiceMockRecorder) Signup(ctx, name, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserService)(nil).Signup), ctx, name, email, password)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(ctx context.Context, user model.User, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(ctx, user, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), ctx, user, password)
}

// MockPlaceService is a mock of PlaceService interface.
type MockPlaceService struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceServiceMockRecorder
	isgomock struct{}
}

// MockPlaceServiceMockRecorder is the mock recorder for MockPlaceService.
type MockPlaceServiceMockRecorder struct {
	mock *MockPlaceService
}

// NewMockPlaceService creates a new mock instance.
func NewMockPlaceService(ctrl *gomock.Controller) *MockPlaceService {
	mock := &MockPlaceService{ctrl: ctrl}
	mock.recorder = &MockPlaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceService) EXPECT() *MockPlaceServiceMockRecorder {
	return m.recorder
}

// CreatePlace mocks base method.
func (m *MockPlaceService) CreatePlace(ctx context.Context, place model.Place) (*model.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlace", ctx, place)
	ret0, _ := ret[0].(*model.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlace indicates an expected call of CreatePlace.
func (mr *MockPlaceServiceMockRecorder) CreatePlace(ctx, place any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlace", reflect.TypeOf((*MockPlaceService)(nil).CreatePlace), ctx, place)
}

// MockReviewService is a mock of ReviewService interface.
type MockReviewService struct {
	ctrl     *gomock.Controller
	recorder *MockReviewServiceMockRecorder
	isgomock struct{}
}

// MockReviewServiceMockRecorder is the mock recorder for MockReviewService.
type MockReviewServiceMockRecorder struct {
	mock *MockReviewService
}

// NewMockReviewService creates a new mock instance.
func NewMockReviewService(ctrl *gomock.Controller) *MockReviewService {
	mock := &MockReviewService{ctrl: ctrl}
	mock.recorder = &MockReviewServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewService) EXPECT() *MockReviewServiceMockRecorder {
	return m.recorder
}

// SubmitReview mocks base method.
func (m *MockReviewService) SubmitReview(ctx context.Context, review model.Review, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReview", ctx, review, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReview indicates an expected call of SubmitReview.
func (mr *MockReviewServiceMockRecorder) SubmitReview(ctx, review, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReview", reflect.TypeOf((*MockReviewService)(nil).SubmitReview), ctx, review, token)
}

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
	isgomock struct{}
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// GenerateTokens mocks base method.
func (m *MockTokenService) GenerateTokens(ctx context.Context, placeID string, count int) (*model.GenerateTokensResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", ctx, placeID, count)
	ret0, _ := ret[0].(*model.GenerateTokensResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockTokenServiceMockRecorder) GenerateTokens(ctx, placeID, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockTokenService)(nil).GenerateTokens), ctx, placeID, count)
}
